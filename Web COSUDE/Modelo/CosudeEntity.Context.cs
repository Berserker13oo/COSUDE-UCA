//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web_COSUDE.Modelo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class COSUDE_UCAEntities : DbContext
    {
        public COSUDE_UCAEntities()
            : base("name=COSUDE_UCAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SPActividadAgregar(string actividadID, string resultadoID, string nombreActividad, string descripcion, Nullable<System.DateTime> fechaFinEjecucion, Nullable<System.DateTime> fechaInicioEjecucion, Nullable<System.DateTime> fechaFinEstablecida, Nullable<System.DateTime> fechaInicioEstablecida)
        {
            var actividadIDParameter = actividadID != null ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(string));
    
            var resultadoIDParameter = resultadoID != null ?
                new ObjectParameter("ResultadoID", resultadoID) :
                new ObjectParameter("ResultadoID", typeof(string));
    
            var nombreActividadParameter = nombreActividad != null ?
                new ObjectParameter("NombreActividad", nombreActividad) :
                new ObjectParameter("NombreActividad", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var fechaFinEjecucionParameter = fechaFinEjecucion.HasValue ?
                new ObjectParameter("FechaFinEjecucion", fechaFinEjecucion) :
                new ObjectParameter("FechaFinEjecucion", typeof(System.DateTime));
    
            var fechaInicioEjecucionParameter = fechaInicioEjecucion.HasValue ?
                new ObjectParameter("FechaInicioEjecucion", fechaInicioEjecucion) :
                new ObjectParameter("FechaInicioEjecucion", typeof(System.DateTime));
    
            var fechaFinEstablecidaParameter = fechaFinEstablecida.HasValue ?
                new ObjectParameter("FechaFinEstablecida", fechaFinEstablecida) :
                new ObjectParameter("FechaFinEstablecida", typeof(System.DateTime));
    
            var fechaInicioEstablecidaParameter = fechaInicioEstablecida.HasValue ?
                new ObjectParameter("FechaInicioEstablecida", fechaInicioEstablecida) :
                new ObjectParameter("FechaInicioEstablecida", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPActividadAgregar", actividadIDParameter, resultadoIDParameter, nombreActividadParameter, descripcionParameter, fechaFinEjecucionParameter, fechaInicioEjecucionParameter, fechaFinEstablecidaParameter, fechaInicioEstablecidaParameter);
        }
    
        public virtual int SPActividadEliminar(string actividadID)
        {
            var actividadIDParameter = actividadID != null ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPActividadEliminar", actividadIDParameter);
        }
    
        public virtual int SPActividadModoficar(string actividadID, string resultadoID, string nombreActividad, string descripcion, Nullable<System.DateTime> fechaFinEjecucion, Nullable<System.DateTime> fechaInicioEjecucion, Nullable<System.DateTime> fechaFinEstablecida, Nullable<System.DateTime> fechaInicioEstablecida)
        {
            var actividadIDParameter = actividadID != null ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(string));
    
            var resultadoIDParameter = resultadoID != null ?
                new ObjectParameter("ResultadoID", resultadoID) :
                new ObjectParameter("ResultadoID", typeof(string));
    
            var nombreActividadParameter = nombreActividad != null ?
                new ObjectParameter("NombreActividad", nombreActividad) :
                new ObjectParameter("NombreActividad", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var fechaFinEjecucionParameter = fechaFinEjecucion.HasValue ?
                new ObjectParameter("FechaFinEjecucion", fechaFinEjecucion) :
                new ObjectParameter("FechaFinEjecucion", typeof(System.DateTime));
    
            var fechaInicioEjecucionParameter = fechaInicioEjecucion.HasValue ?
                new ObjectParameter("FechaInicioEjecucion", fechaInicioEjecucion) :
                new ObjectParameter("FechaInicioEjecucion", typeof(System.DateTime));
    
            var fechaFinEstablecidaParameter = fechaFinEstablecida.HasValue ?
                new ObjectParameter("FechaFinEstablecida", fechaFinEstablecida) :
                new ObjectParameter("FechaFinEstablecida", typeof(System.DateTime));
    
            var fechaInicioEstablecidaParameter = fechaInicioEstablecida.HasValue ?
                new ObjectParameter("FechaInicioEstablecida", fechaInicioEstablecida) :
                new ObjectParameter("FechaInicioEstablecida", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPActividadModoficar", actividadIDParameter, resultadoIDParameter, nombreActividadParameter, descripcionParameter, fechaFinEjecucionParameter, fechaInicioEjecucionParameter, fechaFinEstablecidaParameter, fechaInicioEstablecidaParameter);
        }
    
        public virtual ObjectResult<SPActividadObtener_Result> SPActividadObtener(string actividadID)
        {
            var actividadIDParameter = actividadID != null ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPActividadObtener_Result>("SPActividadObtener", actividadIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPAsistenciaBuscar(string cedula_Carnet)
        {
            var cedula_CarnetParameter = cedula_Carnet != null ?
                new ObjectParameter("Cedula_Carnet", cedula_Carnet) :
                new ObjectParameter("Cedula_Carnet", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPAsistenciaBuscar", cedula_CarnetParameter);
        }
    
        public virtual int SPAsistenciaIngresar(Nullable<int> personaID, Nullable<int> subActividadID)
        {
            var personaIDParameter = personaID.HasValue ?
                new ObjectParameter("PersonaID", personaID) :
                new ObjectParameter("PersonaID", typeof(int));
    
            var subActividadIDParameter = subActividadID.HasValue ?
                new ObjectParameter("SubActividadID", subActividadID) :
                new ObjectParameter("SubActividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPAsistenciaIngresar", personaIDParameter, subActividadIDParameter);
        }
    
        public virtual int SPCargoAgregar(Nullable<int> cargoID, string nombreCargo, string descripcionCargo)
        {
            var cargoIDParameter = cargoID.HasValue ?
                new ObjectParameter("CargoID", cargoID) :
                new ObjectParameter("CargoID", typeof(int));
    
            var nombreCargoParameter = nombreCargo != null ?
                new ObjectParameter("NombreCargo", nombreCargo) :
                new ObjectParameter("NombreCargo", typeof(string));
    
            var descripcionCargoParameter = descripcionCargo != null ?
                new ObjectParameter("DescripcionCargo", descripcionCargo) :
                new ObjectParameter("DescripcionCargo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCargoAgregar", cargoIDParameter, nombreCargoParameter, descripcionCargoParameter);
        }
    
        public virtual int SPCargoEliminar(Nullable<int> cargoID)
        {
            var cargoIDParameter = cargoID.HasValue ?
                new ObjectParameter("CargoID", cargoID) :
                new ObjectParameter("CargoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCargoEliminar", cargoIDParameter);
        }
    
        public virtual int SPCargoModificar(Nullable<int> cargoID, string nombreCargo, string descripcionCargo)
        {
            var cargoIDParameter = cargoID.HasValue ?
                new ObjectParameter("CargoID", cargoID) :
                new ObjectParameter("CargoID", typeof(int));
    
            var nombreCargoParameter = nombreCargo != null ?
                new ObjectParameter("NombreCargo", nombreCargo) :
                new ObjectParameter("NombreCargo", typeof(string));
    
            var descripcionCargoParameter = descripcionCargo != null ?
                new ObjectParameter("DescripcionCargo", descripcionCargo) :
                new ObjectParameter("DescripcionCargo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCargoModificar", cargoIDParameter, nombreCargoParameter, descripcionCargoParameter);
        }
    
        public virtual ObjectResult<SPCargoObtener_Result> SPCargoObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPCargoObtener_Result>("SPCargoObtener");
        }
    
        public virtual int SPDocumentoAgregar(string titulo, string descipcion, string uRL, Nullable<System.DateTime> fechaEntrega, Nullable<int> indicadorID)
        {
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var descipcionParameter = descipcion != null ?
                new ObjectParameter("Descipcion", descipcion) :
                new ObjectParameter("Descipcion", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var fechaEntregaParameter = fechaEntrega.HasValue ?
                new ObjectParameter("FechaEntrega", fechaEntrega) :
                new ObjectParameter("FechaEntrega", typeof(System.DateTime));
    
            var indicadorIDParameter = indicadorID.HasValue ?
                new ObjectParameter("IndicadorID", indicadorID) :
                new ObjectParameter("IndicadorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDocumentoAgregar", tituloParameter, descipcionParameter, uRLParameter, fechaEntregaParameter, indicadorIDParameter);
        }
    
        public virtual int SPDocumentoEliminar(Nullable<int> documentoID)
        {
            var documentoIDParameter = documentoID.HasValue ?
                new ObjectParameter("DocumentoID", documentoID) :
                new ObjectParameter("DocumentoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDocumentoEliminar", documentoIDParameter);
        }
    
        public virtual int SPDocumentoModificar(string titulo, string descipcion, string uRL, Nullable<System.DateTime> fechaEntrega, Nullable<int> indicadorID, Nullable<int> documentoID)
        {
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var descipcionParameter = descipcion != null ?
                new ObjectParameter("Descipcion", descipcion) :
                new ObjectParameter("Descipcion", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var fechaEntregaParameter = fechaEntrega.HasValue ?
                new ObjectParameter("FechaEntrega", fechaEntrega) :
                new ObjectParameter("FechaEntrega", typeof(System.DateTime));
    
            var indicadorIDParameter = indicadorID.HasValue ?
                new ObjectParameter("IndicadorID", indicadorID) :
                new ObjectParameter("IndicadorID", typeof(int));
    
            var documentoIDParameter = documentoID.HasValue ?
                new ObjectParameter("DocumentoID", documentoID) :
                new ObjectParameter("DocumentoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDocumentoModificar", tituloParameter, descipcionParameter, uRLParameter, fechaEntregaParameter, indicadorIDParameter, documentoIDParameter);
        }
    
        public virtual ObjectResult<SPDocumentoObtener_Result> SPDocumentoObtener(Nullable<int> documentoID)
        {
            var documentoIDParameter = documentoID.HasValue ?
                new ObjectParameter("DocumentoID", documentoID) :
                new ObjectParameter("DocumentoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPDocumentoObtener_Result>("SPDocumentoObtener", documentoIDParameter);
        }
    
        public virtual int SPEfectoAgregar(string efectoID, string nombreEfecto, string descripcionEfecto)
        {
            var efectoIDParameter = efectoID != null ?
                new ObjectParameter("EfectoID", efectoID) :
                new ObjectParameter("EfectoID", typeof(string));
    
            var nombreEfectoParameter = nombreEfecto != null ?
                new ObjectParameter("NombreEfecto", nombreEfecto) :
                new ObjectParameter("NombreEfecto", typeof(string));
    
            var descripcionEfectoParameter = descripcionEfecto != null ?
                new ObjectParameter("DescripcionEfecto", descripcionEfecto) :
                new ObjectParameter("DescripcionEfecto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEfectoAgregar", efectoIDParameter, nombreEfectoParameter, descripcionEfectoParameter);
        }
    
        public virtual int SPEfectoEliminar(string efectoId)
        {
            var efectoIdParameter = efectoId != null ?
                new ObjectParameter("EfectoId", efectoId) :
                new ObjectParameter("EfectoId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEfectoEliminar", efectoIdParameter);
        }
    
        public virtual int SPEfectoModificar(string efechtoIDOriginal, string efechtoID, string nombreEfecto, string descripcionEfecto)
        {
            var efechtoIDOriginalParameter = efechtoIDOriginal != null ?
                new ObjectParameter("EfechtoIDOriginal", efechtoIDOriginal) :
                new ObjectParameter("EfechtoIDOriginal", typeof(string));
    
            var efechtoIDParameter = efechtoID != null ?
                new ObjectParameter("EfechtoID", efechtoID) :
                new ObjectParameter("EfechtoID", typeof(string));
    
            var nombreEfectoParameter = nombreEfecto != null ?
                new ObjectParameter("NombreEfecto", nombreEfecto) :
                new ObjectParameter("NombreEfecto", typeof(string));
    
            var descripcionEfectoParameter = descripcionEfecto != null ?
                new ObjectParameter("DescripcionEfecto", descripcionEfecto) :
                new ObjectParameter("DescripcionEfecto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEfectoModificar", efechtoIDOriginalParameter, efechtoIDParameter, nombreEfectoParameter, descripcionEfectoParameter);
        }
    
        public virtual int SPGuardarIndicardor(string iDActividad, Nullable<double> indicardorMetaDocumentos, Nullable<double> indicadorProgresoDocumentos, Nullable<double> indicadorMetaOrganizacion, Nullable<double> indicadorProgresoOrganzacion, Nullable<double> indicadorMetaPersona, Nullable<double> indicadorProgresoPersona)
        {
            var iDActividadParameter = iDActividad != null ?
                new ObjectParameter("IDActividad", iDActividad) :
                new ObjectParameter("IDActividad", typeof(string));
    
            var indicardorMetaDocumentosParameter = indicardorMetaDocumentos.HasValue ?
                new ObjectParameter("indicardorMetaDocumentos", indicardorMetaDocumentos) :
                new ObjectParameter("indicardorMetaDocumentos", typeof(double));
    
            var indicadorProgresoDocumentosParameter = indicadorProgresoDocumentos.HasValue ?
                new ObjectParameter("indicadorProgresoDocumentos", indicadorProgresoDocumentos) :
                new ObjectParameter("indicadorProgresoDocumentos", typeof(double));
    
            var indicadorMetaOrganizacionParameter = indicadorMetaOrganizacion.HasValue ?
                new ObjectParameter("indicadorMetaOrganizacion", indicadorMetaOrganizacion) :
                new ObjectParameter("indicadorMetaOrganizacion", typeof(double));
    
            var indicadorProgresoOrganzacionParameter = indicadorProgresoOrganzacion.HasValue ?
                new ObjectParameter("indicadorProgresoOrganzacion", indicadorProgresoOrganzacion) :
                new ObjectParameter("indicadorProgresoOrganzacion", typeof(double));
    
            var indicadorMetaPersonaParameter = indicadorMetaPersona.HasValue ?
                new ObjectParameter("indicadorMetaPersona", indicadorMetaPersona) :
                new ObjectParameter("indicadorMetaPersona", typeof(double));
    
            var indicadorProgresoPersonaParameter = indicadorProgresoPersona.HasValue ?
                new ObjectParameter("indicadorProgresoPersona", indicadorProgresoPersona) :
                new ObjectParameter("indicadorProgresoPersona", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGuardarIndicardor", iDActividadParameter, indicardorMetaDocumentosParameter, indicadorProgresoDocumentosParameter, indicadorMetaOrganizacionParameter, indicadorProgresoOrganzacionParameter, indicadorMetaPersonaParameter, indicadorProgresoPersonaParameter);
        }
    
        public virtual int SPIndicadorAgregar(string actividadID, string descripcion, Nullable<double> indicadorMetaDocumento, Nullable<double> indicadorMetaOrganizacion, Nullable<double> indicadorMetaPersona, Nullable<double> indicadorProgresoDocumento, Nullable<double> indicadorProgresoOrganizacion, Nullable<double> indicadorProgresoPersonas)
        {
            var actividadIDParameter = actividadID != null ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var indicadorMetaDocumentoParameter = indicadorMetaDocumento.HasValue ?
                new ObjectParameter("IndicadorMetaDocumento", indicadorMetaDocumento) :
                new ObjectParameter("IndicadorMetaDocumento", typeof(double));
    
            var indicadorMetaOrganizacionParameter = indicadorMetaOrganizacion.HasValue ?
                new ObjectParameter("IndicadorMetaOrganizacion", indicadorMetaOrganizacion) :
                new ObjectParameter("IndicadorMetaOrganizacion", typeof(double));
    
            var indicadorMetaPersonaParameter = indicadorMetaPersona.HasValue ?
                new ObjectParameter("IndicadorMetaPersona", indicadorMetaPersona) :
                new ObjectParameter("IndicadorMetaPersona", typeof(double));
    
            var indicadorProgresoDocumentoParameter = indicadorProgresoDocumento.HasValue ?
                new ObjectParameter("IndicadorProgresoDocumento", indicadorProgresoDocumento) :
                new ObjectParameter("IndicadorProgresoDocumento", typeof(double));
    
            var indicadorProgresoOrganizacionParameter = indicadorProgresoOrganizacion.HasValue ?
                new ObjectParameter("IndicadorProgresoOrganizacion", indicadorProgresoOrganizacion) :
                new ObjectParameter("IndicadorProgresoOrganizacion", typeof(double));
    
            var indicadorProgresoPersonasParameter = indicadorProgresoPersonas.HasValue ?
                new ObjectParameter("IndicadorProgresoPersonas", indicadorProgresoPersonas) :
                new ObjectParameter("IndicadorProgresoPersonas", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPIndicadorAgregar", actividadIDParameter, descripcionParameter, indicadorMetaDocumentoParameter, indicadorMetaOrganizacionParameter, indicadorMetaPersonaParameter, indicadorProgresoDocumentoParameter, indicadorProgresoOrganizacionParameter, indicadorProgresoPersonasParameter);
        }
    
        public virtual int SPIndicadorEliminar(Nullable<int> indicadorID)
        {
            var indicadorIDParameter = indicadorID.HasValue ?
                new ObjectParameter("IndicadorID", indicadorID) :
                new ObjectParameter("IndicadorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPIndicadorEliminar", indicadorIDParameter);
        }
    
        public virtual int SPIndicadorModificar(Nullable<int> indicadorID, string actividadID, string descripcion, Nullable<double> indicadorMetaDocumento, Nullable<double> indicadorMetaOrganizacion, Nullable<double> indicadorMetaPersona, Nullable<double> indicadorProgresoDocumento, Nullable<double> indicadorProgresoOrganizacion, Nullable<double> indicadorProgresoPersonas)
        {
            var indicadorIDParameter = indicadorID.HasValue ?
                new ObjectParameter("IndicadorID", indicadorID) :
                new ObjectParameter("IndicadorID", typeof(int));
    
            var actividadIDParameter = actividadID != null ?
                new ObjectParameter("ActividadID", actividadID) :
                new ObjectParameter("ActividadID", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var indicadorMetaDocumentoParameter = indicadorMetaDocumento.HasValue ?
                new ObjectParameter("IndicadorMetaDocumento", indicadorMetaDocumento) :
                new ObjectParameter("IndicadorMetaDocumento", typeof(double));
    
            var indicadorMetaOrganizacionParameter = indicadorMetaOrganizacion.HasValue ?
                new ObjectParameter("IndicadorMetaOrganizacion", indicadorMetaOrganizacion) :
                new ObjectParameter("IndicadorMetaOrganizacion", typeof(double));
    
            var indicadorMetaPersonaParameter = indicadorMetaPersona.HasValue ?
                new ObjectParameter("IndicadorMetaPersona", indicadorMetaPersona) :
                new ObjectParameter("IndicadorMetaPersona", typeof(double));
    
            var indicadorProgresoDocumentoParameter = indicadorProgresoDocumento.HasValue ?
                new ObjectParameter("IndicadorProgresoDocumento", indicadorProgresoDocumento) :
                new ObjectParameter("IndicadorProgresoDocumento", typeof(double));
    
            var indicadorProgresoOrganizacionParameter = indicadorProgresoOrganizacion.HasValue ?
                new ObjectParameter("IndicadorProgresoOrganizacion", indicadorProgresoOrganizacion) :
                new ObjectParameter("IndicadorProgresoOrganizacion", typeof(double));
    
            var indicadorProgresoPersonasParameter = indicadorProgresoPersonas.HasValue ?
                new ObjectParameter("IndicadorProgresoPersonas", indicadorProgresoPersonas) :
                new ObjectParameter("IndicadorProgresoPersonas", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPIndicadorModificar", indicadorIDParameter, actividadIDParameter, descripcionParameter, indicadorMetaDocumentoParameter, indicadorMetaOrganizacionParameter, indicadorMetaPersonaParameter, indicadorProgresoDocumentoParameter, indicadorProgresoOrganizacionParameter, indicadorProgresoPersonasParameter);
        }
    
        public virtual ObjectResult<SPIndicadorObtener_Result> SPIndicadorObtener(string actividad)
        {
            var actividadParameter = actividad != null ?
                new ObjectParameter("Actividad", actividad) :
                new ObjectParameter("Actividad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPIndicadorObtener_Result>("SPIndicadorObtener", actividadParameter);
        }
    
        public virtual int SPInstitucionAgregar(string nombreInstitucion)
        {
            var nombreInstitucionParameter = nombreInstitucion != null ?
                new ObjectParameter("NombreInstitucion", nombreInstitucion) :
                new ObjectParameter("NombreInstitucion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInstitucionAgregar", nombreInstitucionParameter);
        }
    
        public virtual int SPInstitucionEliminar(Nullable<int> institucionID)
        {
            var institucionIDParameter = institucionID.HasValue ?
                new ObjectParameter("InstitucionID", institucionID) :
                new ObjectParameter("InstitucionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInstitucionEliminar", institucionIDParameter);
        }
    
        public virtual int SPInstitucionModificar(string nombreInstitucion, Nullable<int> institucionID)
        {
            var nombreInstitucionParameter = nombreInstitucion != null ?
                new ObjectParameter("NombreInstitucion", nombreInstitucion) :
                new ObjectParameter("NombreInstitucion", typeof(string));
    
            var institucionIDParameter = institucionID.HasValue ?
                new ObjectParameter("InstitucionID", institucionID) :
                new ObjectParameter("InstitucionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInstitucionModificar", nombreInstitucionParameter, institucionIDParameter);
        }
    
        public virtual ObjectResult<SPInstitucionObtener_Result> SPInstitucionObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPInstitucionObtener_Result>("SPInstitucionObtener");
        }
    
        public virtual ObjectResult<SPObtenerEfecto_Result> SPObtenerEfecto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPObtenerEfecto_Result>("SPObtenerEfecto");
        }
    
        public virtual int SPOrganizacionAgregar(string nombreOrganizacion, string direcccionOrganizacion, string nombreContacto, string correoContacto, string telefonoContacto, Nullable<int> indicadorID, Nullable<System.DateTime> fechaEntrega)
        {
            var nombreOrganizacionParameter = nombreOrganizacion != null ?
                new ObjectParameter("NombreOrganizacion", nombreOrganizacion) :
                new ObjectParameter("NombreOrganizacion", typeof(string));
    
            var direcccionOrganizacionParameter = direcccionOrganizacion != null ?
                new ObjectParameter("DirecccionOrganizacion", direcccionOrganizacion) :
                new ObjectParameter("DirecccionOrganizacion", typeof(string));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("NombreContacto", nombreContacto) :
                new ObjectParameter("NombreContacto", typeof(string));
    
            var correoContactoParameter = correoContacto != null ?
                new ObjectParameter("CorreoContacto", correoContacto) :
                new ObjectParameter("CorreoContacto", typeof(string));
    
            var telefonoContactoParameter = telefonoContacto != null ?
                new ObjectParameter("TelefonoContacto", telefonoContacto) :
                new ObjectParameter("TelefonoContacto", typeof(string));
    
            var indicadorIDParameter = indicadorID.HasValue ?
                new ObjectParameter("IndicadorID", indicadorID) :
                new ObjectParameter("IndicadorID", typeof(int));
    
            var fechaEntregaParameter = fechaEntrega.HasValue ?
                new ObjectParameter("FechaEntrega", fechaEntrega) :
                new ObjectParameter("FechaEntrega", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPOrganizacionAgregar", nombreOrganizacionParameter, direcccionOrganizacionParameter, nombreContactoParameter, correoContactoParameter, telefonoContactoParameter, indicadorIDParameter, fechaEntregaParameter);
        }
    
        public virtual int SPOrganizacionEliminar(Nullable<int> organizacionID)
        {
            var organizacionIDParameter = organizacionID.HasValue ?
                new ObjectParameter("OrganizacionID", organizacionID) :
                new ObjectParameter("OrganizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPOrganizacionEliminar", organizacionIDParameter);
        }
    
        public virtual int SPOrganizacionModificar(string nombreOrganizacion, string direcccionOrganizacion, string nombreContacto, string correoContacto, string telefonoContacto, Nullable<int> indicadorID, Nullable<System.DateTime> fechaEntrega, Nullable<int> organizacionID)
        {
            var nombreOrganizacionParameter = nombreOrganizacion != null ?
                new ObjectParameter("NombreOrganizacion", nombreOrganizacion) :
                new ObjectParameter("NombreOrganizacion", typeof(string));
    
            var direcccionOrganizacionParameter = direcccionOrganizacion != null ?
                new ObjectParameter("DirecccionOrganizacion", direcccionOrganizacion) :
                new ObjectParameter("DirecccionOrganizacion", typeof(string));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("NombreContacto", nombreContacto) :
                new ObjectParameter("NombreContacto", typeof(string));
    
            var correoContactoParameter = correoContacto != null ?
                new ObjectParameter("CorreoContacto", correoContacto) :
                new ObjectParameter("CorreoContacto", typeof(string));
    
            var telefonoContactoParameter = telefonoContacto != null ?
                new ObjectParameter("TelefonoContacto", telefonoContacto) :
                new ObjectParameter("TelefonoContacto", typeof(string));
    
            var indicadorIDParameter = indicadorID.HasValue ?
                new ObjectParameter("IndicadorID", indicadorID) :
                new ObjectParameter("IndicadorID", typeof(int));
    
            var fechaEntregaParameter = fechaEntrega.HasValue ?
                new ObjectParameter("FechaEntrega", fechaEntrega) :
                new ObjectParameter("FechaEntrega", typeof(System.DateTime));
    
            var organizacionIDParameter = organizacionID.HasValue ?
                new ObjectParameter("OrganizacionID", organizacionID) :
                new ObjectParameter("OrganizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPOrganizacionModificar", nombreOrganizacionParameter, direcccionOrganizacionParameter, nombreContactoParameter, correoContactoParameter, telefonoContactoParameter, indicadorIDParameter, fechaEntregaParameter, organizacionIDParameter);
        }
    
        public virtual ObjectResult<SPOrganizacionObtener_Result> SPOrganizacionObtener(Nullable<int> organizacionID)
        {
            var organizacionIDParameter = organizacionID.HasValue ?
                new ObjectParameter("OrganizacionID", organizacionID) :
                new ObjectParameter("OrganizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPOrganizacionObtener_Result>("SPOrganizacionObtener", organizacionIDParameter);
        }
    
        public virtual int SPPersonaAgregar(string cedula_Carnet, string nombres, Nullable<bool> sexo, string telefono, Nullable<int> edad, string comunidad, string correoElectronico, Nullable<int> cargoID, Nullable<int> institucionID)
        {
            var cedula_CarnetParameter = cedula_Carnet != null ?
                new ObjectParameter("Cedula_Carnet", cedula_Carnet) :
                new ObjectParameter("Cedula_Carnet", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var sexoParameter = sexo.HasValue ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(bool));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("Edad", edad) :
                new ObjectParameter("Edad", typeof(int));
    
            var comunidadParameter = comunidad != null ?
                new ObjectParameter("Comunidad", comunidad) :
                new ObjectParameter("Comunidad", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            var cargoIDParameter = cargoID.HasValue ?
                new ObjectParameter("CargoID", cargoID) :
                new ObjectParameter("CargoID", typeof(int));
    
            var institucionIDParameter = institucionID.HasValue ?
                new ObjectParameter("InstitucionID", institucionID) :
                new ObjectParameter("InstitucionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPPersonaAgregar", cedula_CarnetParameter, nombresParameter, sexoParameter, telefonoParameter, edadParameter, comunidadParameter, correoElectronicoParameter, cargoIDParameter, institucionIDParameter);
        }
    
        public virtual int SPPersonaEliminar(Nullable<int> personaID)
        {
            var personaIDParameter = personaID.HasValue ?
                new ObjectParameter("PersonaID", personaID) :
                new ObjectParameter("PersonaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPPersonaEliminar", personaIDParameter);
        }
    
        public virtual int SPPersonaModificar(Nullable<int> personaID, string cedula_Carnet, string nombres, Nullable<bool> sexo, string telefono, Nullable<int> edad, string comunidad, string correoElectronico, Nullable<int> cargoID, Nullable<int> institucionID)
        {
            var personaIDParameter = personaID.HasValue ?
                new ObjectParameter("PersonaID", personaID) :
                new ObjectParameter("PersonaID", typeof(int));
    
            var cedula_CarnetParameter = cedula_Carnet != null ?
                new ObjectParameter("Cedula_Carnet", cedula_Carnet) :
                new ObjectParameter("Cedula_Carnet", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var sexoParameter = sexo.HasValue ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(bool));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("Edad", edad) :
                new ObjectParameter("Edad", typeof(int));
    
            var comunidadParameter = comunidad != null ?
                new ObjectParameter("Comunidad", comunidad) :
                new ObjectParameter("Comunidad", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("CorreoElectronico", correoElectronico) :
                new ObjectParameter("CorreoElectronico", typeof(string));
    
            var cargoIDParameter = cargoID.HasValue ?
                new ObjectParameter("CargoID", cargoID) :
                new ObjectParameter("CargoID", typeof(int));
    
            var institucionIDParameter = institucionID.HasValue ?
                new ObjectParameter("InstitucionID", institucionID) :
                new ObjectParameter("InstitucionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPPersonaModificar", personaIDParameter, cedula_CarnetParameter, nombresParameter, sexoParameter, telefonoParameter, edadParameter, comunidadParameter, correoElectronicoParameter, cargoIDParameter, institucionIDParameter);
        }
    
        public virtual ObjectResult<SPPersonaObtener_Result> SPPersonaObtener(Nullable<int> personaID)
        {
            var personaIDParameter = personaID.HasValue ?
                new ObjectParameter("PersonaID", personaID) :
                new ObjectParameter("PersonaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPPersonaObtener_Result>("SPPersonaObtener", personaIDParameter);
        }
    
        public virtual int SPResultadoAgregar(string resultadoID, string nombreResultado, string efectoID)
        {
            var resultadoIDParameter = resultadoID != null ?
                new ObjectParameter("ResultadoID", resultadoID) :
                new ObjectParameter("ResultadoID", typeof(string));
    
            var nombreResultadoParameter = nombreResultado != null ?
                new ObjectParameter("NombreResultado", nombreResultado) :
                new ObjectParameter("NombreResultado", typeof(string));
    
            var efectoIDParameter = efectoID != null ?
                new ObjectParameter("EfectoID", efectoID) :
                new ObjectParameter("EfectoID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPResultadoAgregar", resultadoIDParameter, nombreResultadoParameter, efectoIDParameter);
        }
    
        public virtual int SPResultadoEliminar(string resultadoID)
        {
            var resultadoIDParameter = resultadoID != null ?
                new ObjectParameter("ResultadoID", resultadoID) :
                new ObjectParameter("ResultadoID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPResultadoEliminar", resultadoIDParameter);
        }
    
        public virtual int SPResultadoModificar(string resultadoIDOriginal, string nombreResultado, string resultadoID, string efectoID)
        {
            var resultadoIDOriginalParameter = resultadoIDOriginal != null ?
                new ObjectParameter("ResultadoIDOriginal", resultadoIDOriginal) :
                new ObjectParameter("ResultadoIDOriginal", typeof(string));
    
            var nombreResultadoParameter = nombreResultado != null ?
                new ObjectParameter("NombreResultado", nombreResultado) :
                new ObjectParameter("NombreResultado", typeof(string));
    
            var resultadoIDParameter = resultadoID != null ?
                new ObjectParameter("ResultadoID", resultadoID) :
                new ObjectParameter("ResultadoID", typeof(string));
    
            var efectoIDParameter = efectoID != null ?
                new ObjectParameter("EfectoID", efectoID) :
                new ObjectParameter("EfectoID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPResultadoModificar", resultadoIDOriginalParameter, nombreResultadoParameter, resultadoIDParameter, efectoIDParameter);
        }
    
        public virtual ObjectResult<SPResultadoObtener_Result> SPResultadoObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPResultadoObtener_Result>("SPResultadoObtener");
        }
    
        public virtual int SPSubActividadAgregar(Nullable<System.DateTime> fecha, Nullable<System.TimeSpan> hora, string nombre, Nullable<int> indicadorID)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var horaParameter = hora.HasValue ?
                new ObjectParameter("Hora", hora) :
                new ObjectParameter("Hora", typeof(System.TimeSpan));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var indicadorIDParameter = indicadorID.HasValue ?
                new ObjectParameter("indicadorID", indicadorID) :
                new ObjectParameter("indicadorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPSubActividadAgregar", fechaParameter, horaParameter, nombreParameter, indicadorIDParameter);
        }
    
        public virtual int SPSubActividadEliminar(Nullable<int> subActividadID)
        {
            var subActividadIDParameter = subActividadID.HasValue ?
                new ObjectParameter("subActividadID", subActividadID) :
                new ObjectParameter("subActividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPSubActividadEliminar", subActividadIDParameter);
        }
    
        public virtual int SPSubActividadModificar(Nullable<System.DateTime> fecha, Nullable<System.TimeSpan> hora, string nombre, Nullable<int> indicadorID, Nullable<int> subActividadID)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var horaParameter = hora.HasValue ?
                new ObjectParameter("Hora", hora) :
                new ObjectParameter("Hora", typeof(System.TimeSpan));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var indicadorIDParameter = indicadorID.HasValue ?
                new ObjectParameter("indicadorID", indicadorID) :
                new ObjectParameter("indicadorID", typeof(int));
    
            var subActividadIDParameter = subActividadID.HasValue ?
                new ObjectParameter("subActividadID", subActividadID) :
                new ObjectParameter("subActividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPSubActividadModificar", fechaParameter, horaParameter, nombreParameter, indicadorIDParameter, subActividadIDParameter);
        }
    
        public virtual ObjectResult<SPSubActividadObtener_Result> SPSubActividadObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPSubActividadObtener_Result>("SPSubActividadObtener");
        }
    
        public virtual int SPSubActividadPersonaEliminar(Nullable<int> personaID, Nullable<int> subAcividadID)
        {
            var personaIDParameter = personaID.HasValue ?
                new ObjectParameter("PersonaID", personaID) :
                new ObjectParameter("PersonaID", typeof(int));
    
            var subAcividadIDParameter = subAcividadID.HasValue ?
                new ObjectParameter("SubAcividadID", subAcividadID) :
                new ObjectParameter("SubAcividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPSubActividadPersonaEliminar", personaIDParameter, subAcividadIDParameter);
        }
    
        public virtual int SPSubActividadPersonaInsertar(Nullable<int> personaID, Nullable<int> subAcividadID)
        {
            var personaIDParameter = personaID.HasValue ?
                new ObjectParameter("PersonaID", personaID) :
                new ObjectParameter("PersonaID", typeof(int));
    
            var subAcividadIDParameter = subAcividadID.HasValue ?
                new ObjectParameter("SubAcividadID", subAcividadID) :
                new ObjectParameter("SubAcividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPSubActividadPersonaInsertar", personaIDParameter, subAcividadIDParameter);
        }
    
        public virtual ObjectResult<SPSubActividadPersonaSelectSubActividad_Result> SPSubActividadPersonaSelectSubActividad(Nullable<int> subAcividadID)
        {
            var subAcividadIDParameter = subAcividadID.HasValue ?
                new ObjectParameter("SubAcividadID", subAcividadID) :
                new ObjectParameter("SubAcividadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPSubActividadPersonaSelectSubActividad_Result>("SPSubActividadPersonaSelectSubActividad", subAcividadIDParameter);
        }
    }
}
